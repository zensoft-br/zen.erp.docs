// .z-input 
//
// Structure:
//
// .z-input
//   >label
//   >.input,>input,>select,>textarea
//   >.h (horizontal container)
//     >.input,>input,>select,>textarea
//   >.v (vertical container)
//     >.input,>input,>select,>textarea
//
// Images with icons can be placed anywhere and must have a class ".icon".
// Use a <div> for checkboxes, radios, and unconventional inputs.
// Messages can be shown with the attributes "data-info", "data-success", "data-warning" and "data-danger" in the ".z-input" element.
.z-input {

  @mixin inputs {

    >.input,
    >input,
    >select,
    >textarea {
      border-bottom: 1px solid var(--color-border) !important; // It's being overriden by mixin zen-identity

      // Autofill fields (like user and password) usually uses a distinct background color in some browsers
      // &:autofill {
      //   box-shadow: 0 0 0 100px var(--color-surface) inset;
      // }

      text-align: inherit;

      &:focus-within {
        border-color: var(--color-primary) !important; // It's being overriden by mixin zen-identity
      }

      &:focus {
        border-color: var(--color-primary) !important; // It's being overriden by mixin zen-identity
      }

      @content;
    }

  }

  display: flex;
  flex-direction: column;
  gap: 0.2rem;
  padding: 0.2rem 0;
  width: 100%;

  background-color: transparent;

  box-sizing: border-box;
  // min-width: 10rem;

  &.disabled {
    opacity: 0.4;
  }

  // label
  >label {
    color: var(--color-darkgray);
    font-size: var(--font-size-small);
    font-weight: 500;
    margin-bottom: 0.25rem;
  }

  &[required]>label::after {
    content: "*";
    padding-left: 0.2rem;
  }

  .h {
    display: flex;
    flex-direction: row;
    gap: 0.2rem;
    align-items: center;

    @include inputs {
      flex: 1;
    }
  }

  .v {
    display: flex;
    flex-direction: column;
    gap: 0.2rem;

    @include inputs;
  }

  @include inputs;

  &[data-info]::after {
    content: attr(data-info);
    color: var(--color-info);
    font-size: var(--font-size-small);
    padding-top: 0.1rem;
  }

  &[data-success]::after {
    content: attr(data-success);
    color: var(--color-success);
    font-size: var(--font-size-small);
    padding-top: 0.1rem;
  }

  &[data-warning]::after {
    content: attr(data-warning);
    color: var(--color-warning);
    font-size: var(--font-size-small);
    padding-top: 0.1rem;
  }

  &[data-danger]::after {
    content: attr(data-danger);
    color: var(--color-danger);
    font-size: var(--font-size-small);
    padding-top: 0.1rem;
  }

  & .icon {
    width: 1.1rem;
    height: 1.1rem;
    fill: var(--color-secondary);
    object-fit: cover;
  }
}

// fieldset
//
// Used to group elements, both horizontally (".h") and vertically (".v").
fieldset {
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  gap: 0.7rem;

  // border: 1px solid var(--color-border);
  // border-radius: var(--border-radius);
  // padding: 0.5rem 1rem;

  border: none;
  padding: 0;

  box-sizing: border-box;
  width: 100%;

  &:has(>legend),
  &.frame {
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    padding: 0.5rem 1rem;
  }

  @include mq-small {
    border: none;
    padding: 0.5rem 0rem;
  }

  &>* {
    flex: 1;
  }

  &>legend {
    color: var(--color-primary);
    flex: none;
    font-size: var(--font-size-large);
  }

  &.v {
    display: flex;
    flex-direction: column;
    gap: 0.7rem;

    border: none;
    padding: 0;
  }

  &.h {
    display: flex;
    flex-direction: row;
    gap: 0.7rem;

    border: none;
    padding: 0;
  }

  &.frame {
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    padding: 0.5rem 1rem;
  }
}